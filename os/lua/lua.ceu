native/pre do
    ##include "lua.h"
    ##include "lualib.h"
    ##include "lauxlib.h"
    ##include "string.h"
end

native do
    static void* l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {
        (void)osize;  /* not used */
        tceu_app* _ceu_app = (tceu_app*) ud;
        void* ret = ceu_out_realloc(ptr, nsize);
        return ret;
     }
end

// TODO
native @pure _lua_newstate(), _lua_pushnumber(), _lua_tonumber();
native @nohold _ceu_out_log();

input (void)=>_lua_State* NEW do
    return _lua_newstate(_l_alloc, __ceu_app);
end

input (_lua_State* l, _lua_Number v)=>void PUSHNUMBER do
    _lua_pushnumber(l, v);
end

input (_lua_State* l, int index)=>int TONUMBER do
    return _lua_tonumber(l, index);
end

input (_lua_State* l, char* name)=>void GETGLOBAL do
    return _lua_getglobal(l, name);
end

input (_lua_State* l)=>void PUSHNIL do
    _lua_pushnil(l);
end

input (_lua_State* l, int index)=>int NEXT do
    return _lua_next(l, index);
end

input (_lua_State* l, int index, char* k)=>void GETFIELD do
    _lua_getfield(l, index, k);
end

input (_lua_State* l, int index)=>char* TOSTRING do
    return _lua_tostring(l, index);
end

input (_lua_State* l, char* str)=>int L_DOSTRING do
    return _luaL_dostring(l, str);
end

input (_lua_State *l, int index)=>int TYPE do
    return _lua_type(l, index);
end

input (_lua_State *l, int n)=>void POP do
    _lua_pop(l, n);
end

input (_lua_State *l, void *p)=>void PUSHLIGHTUSERDATA do
    _lua_pushlightuserdata(l, p);
end

input (_lua_State *l, int index, char *k)=>void SETFIELD do
    _lua_setfield(l, index, k);
end

input (_lua_State *l, int index)=>int OBJLEN do
    return _lua_objlen(l, index);
end

input (_lua_State *l, int index, int n)=>void RAWGETI do
    _lua_rawgeti(l, index, n);
end

input (_lua_State *l)=>int GETTOP do
    return _lua_gettop(l);
end

input (_lua_State *l, int index)=>void* TOLIGHTUSERDATA do
    return _lua_touserdata(l, index);
end

input (_lua_State* l, char* str)=>int L_LOADSTRING do
    return _luaL_loadstring(l, str);
end

input (_lua_State* l)=>int ERROR do
    _ceu_out_log(0, "LUA ERROR: ");
    _ceu_out_log(0, _lua_tostring(l,-1));
    _ceu_out_log(0, "\n");
    return _lua_error(l);
end

input (_lua_State* l, int index)=>int ISNUMBER do
    return _lua_isnumber(l, index);
end

input (_lua_State* l, int index)=>int ISBOOLEAN do
    return _lua_isboolean(l, index);
end

input (_lua_State* l, int index)=>int ISSTRING do
    return _lua_isstring(l, index);
end

input (_lua_State* l, int index)=>int ISLIGHTUSERDATA do
    return _lua_islightuserdata(l, index);
end

input (_lua_State* l, int index)=>int TOBOOLEAN do
    return _lua_toboolean(l, index);
end

input (_lua_State* l, int index)=>void* TOUSERDATA do
    return _lua_touserdata(l, index);
end

input (_lua_State* l, int nargs, int nresults, int errfunc)=>int PCALL do
    return _lua_pcall(l, nargs, nresults, errfunc);
end

input (_lua_State* l, char* str)=>void PUSHSTRING do
    _lua_pushstring(l, str);
end

input (_lua_State* l)=>void L_OPENLIBS do
_ceu_out_log(0, "before ");
_ceu_out_log(1, l);
_ceu_out_log(0, "\n");
    _luaL_openlibs(l);
_ceu_out_log(0, "after\n");
end

/*
_lua_pushnumber(l, 10);
var int v = _lua_tonumber(l, -1);

if v == 10 then
                #define GPFSEL1 ((uint*)0x20200004)
                #define GPSET0  ((uint*)0x2020001C)
                #define GPCLR0  ((uint*)0x20200028)
                var uint ra;
                ra = *GPFSEL1;
                ra = ra & ~(7<<18);
                ra = ra | 1<<18;
                *GPFSEL1 = ra;
                *GPCLR0 = 1<<16;   // GPIO16 on
end
*/

await FOREVER;
