native do
    ##include <stdlib.h>
    ##include "vfs.h"
    void libfs_init();
    //##include "uart.h"
    ##define PURE(x) x
end

native @pure   _fsize(), _PURE();
native @nohold _fread(), _fopen(), _fclose();

input (char&& path, char&& mode)=>_FILE&& OPEN do
    return _PURE(_fopen(path, mode));
end

input (_FILE&& f)=>int CLOSE do
    return _fclose(f);
end

input (_FILE&& f)=>int SIZE do
    return _fsize(f);
end

input (void&& ptr, int size, int nmemb, _FILE&& f)=>int READ do
    return _fread(ptr, size, nmemb, f);
end

//uart_init();
//for (volatile int i=0; i<0x110A; i++);

// Register the various file systems
_libfs_init();

// List devices
_vfs_list_devices();

/*

// Default device
var _FILE[] f;
finalize
    f = _fopen("/boot/rpi-boot.cfg", "r");
with
    _fclose(f);
end

if f == null then
    await FOREVER;
end

var int flen = _fsize(f);
//char *buf = (char *)malloc(flen+1);
var char[255] buf;
buf[flen] = 0;
_fread(buf, 1, flen, f);

#define GPFSEL1 ((uint*)0x20200004)
#define GPSET0  ((uint*)0x2020001C)
#define GPCLR0  ((uint*)0x20200028)
var uint ra;
ra = *GPFSEL1;
ra = ra & ~(7<<18);
ra = ra | 1<<18;
*GPFSEL1 = ra;

var char* orig = "multiboot";

loop do
    loop i in 9 do
        if buf[i] != orig[i] then
            await FOREVER;
        end
        *GPCLR0 = 1<<16;
        await 1s;
        *GPSET0 = 1<<16;
        await 1s;
    end
end

*/

await FOREVER;
